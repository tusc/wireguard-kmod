#!/bin/sh

{
GITHUB_API_URL="https://api.github.com/repos"
GITHUB_REPOSITORY="tusc/wireguard-kmod"

TMP_WIREGUARD_FILE="/tmp/wireguard-kmod.tar.Z"

ON_BOOT_PATH="/mnt/data/on_boot.d"
ON_BOOT_D_WG_PATH="/mnt/data/wireguard/on_boot.d"
ON_BOOT_D_WG_FILENAME="20-wireguard.sh"

WG_SERVICE_URL="https://raw.githubusercontent.com/tusc/wireguard-kmod/main/src/boot/setup-wireguard.service"
WG_SERVICE_PATH="/etc/systemd/system/setup-wireguard.service"

check_dependency() {
  for dep in "$@"; do
    [ -n "$(command -v "$dep")" ] ||
      echo "\`${dep}\` is not installed"

  done

  unset dep
}

udm_model() {
  case "$(ubnt-device-info model || true)" in
    "UniFi Dream Machine SE")
      echo "udmse"
      ;;
    "UniFi Dream Machine Pro")
      echo "udmpro"
      ;;
    "UniFi Dream Machine")
      echo "udm"
      ;;
    "UniFi Dream Router")
      echo "udr"
      ;;
    *)
      echo "unknown"
      ;;
  esac
}

get_latest_download_url() {
  check_dependency curl

  curl -fsL "${GITHUB_API_URL}/${GITHUB_REPOSITORY}/releases/latest" |
    awk '$0 ~ /"browser_download_url"/ {sub(/.*:\s*"/,"",$0); gsub("\"", "", $0); print $0}'
}

get_persistent_path() {
  if [ -n "$(command -v ubnt-device-info)" ]; then
    case "$(ubnt-device-info summary | awk '$1 ~ /^Model:$/ {gsub(/[\(\)*]/, "", $NF); print $NF}')" in
      UDR)
        echo "/data${1:+/$1}"
        ;;
      *)
        echo "/mnt/data${1:+/$1}"
        ;;
    esac
  fi
}

on_boot_script() {
cat << EOF
#!/usr/bin/env bash

WG_INTERFACE="wg0"


if [ -d "/data/wireguard" ]; then
  [[ -x "/data/wireguard/setup_wireguard.sh" ]] && "/data/wireguard/setup_wireguard.sh" >&2
elif [ -d "/mnt/data/wireguard" ]; then
  [[ -x "/mnt/data/wireguard/setup_wireguard.sh" ]] && "/mnt/data/wireguard/setup_wireguard.sh" >&2
else
  exit 1
fi

if [[ -n "/usr/bin/wg-quick" ]]; then
  /usr/bin/wg-quick up "\$WG_INTERFACE"
else
  # You can add whatever here like a telegram script to notify that wg could not start
  echo "Wireguard could not be started \$(date +%s)" >> /var/log/wg-startup.log
fi

EOF
}

echo "Downloading wireguard-kmod"
curl -sLJo "$TMP_WIREGUARD_FILE" "$(get_latest_download_url)"
sleep 1

if [ ! -f "$TMP_WIREGUARD_FILE" ]; then
  echo "Wireguard downloaded file could not be found."
  exit 4
fi

echo "Unzipping wireguard-kmod"
tar -C "$(get_persistent_path)" -xzf "$TMP_WIREGUARD_FILE"
sleep 1

if [ ! -d "$(get_persistent_path "wireguard")" ]; then
  echo "Wireguard-kmod was not downloaded"
  exit 4
fi

echo "Moving to $(get_persistent_path "wireguard")"
cd "$(get_persistent_path "wireguard")" || exit 4
echo "Execution permissions"
chmod +x "$(get_persistent_path "wireguard")/setup_wireguard.sh"
"$(get_persistent_path "wireguard")/setup_wireguard.sh"

case "$(udm_model)" in
  udm|udmpro)
    echo "Creating on boot script for wireguard setup"
    mkdir -p "$ON_BOOT_D_WG_PATH"
    rm -f "${ON_BOOT_D_WG_PATH}/${ON_BOOT_D_WG_FILENAME}"
    [ ! -f "${ON_BOOT_D_WG_PATH}/${ON_BOOT_D_WG_FILENAME}" ] && on_boot_script > "${ON_BOOT_D_WG_PATH}/${ON_BOOT_D_WG_FILENAME}"
    chmod +x "${ON_BOOT_D_WG_PATH}/${ON_BOOT_D_WG_FILENAME}"
    ln -s "${ON_BOOT_D_WG_PATH}/${ON_BOOT_D_WG_FILENAME}" "$ON_BOOT_PATH"
    ;;
  *)
    check_dependency systemctl

    echo "Creating system startup script for wireguard"
    curl -sLo "$WG_SERVICE_PATH" "$WG_SERVICE_URL"
    systemctl daemon-reload
    systemctl enable "$(basename "${WG_SERVICE_PATH%.*}")"
    ;;
esac

echo
echo "Installation has finished sucessfully!"
echo
echo "Wireguard configuration path"
echo "  $(get_persistent_path "wireguard")/etc/wireguard"
echo
}
